
Program         -> Decl* EOF
Decl            -> ImportDecl | InterfaceDecl | TypeDecl | ServiceDecl | Service | Line

ImportDecl      -> Import | Include
  Import          -> "from" ID "import" ID Line?
  Include         -> "include" ID(String)

InterfaceDecl   -> "interface" "extender"? ID "{" RequestResponseDecl? OneWayDecl? "}"
  RequestResponseDecl     -> ( "requestResponse" |"RequestResponse" ) ":" RequestResponseElement ("," RequestResponseElement)*
    RequestResponseElement  -> ID "(" ID ")" "(" ID ")"
  OneWayDecl              -> ( "oneWay" | "OneWay" ) ":" OneWayElement ("," OneWayElement)*
    OneWayElement           -> ID "(" ID ")"

TypeDecl        -> "type" ID (":" ID ("|" ID)*)? Block?

ServiceDecl     -> "service" ID ( "(" Token* ")" )? "{" Service* "}" // (p: MyServiceParam),
  Service         -> Execution | Embed | Embedded | InputPort | OutputPort | Init | Main | Courier | DefineProcedure | Line
    Execution       -> "execution" ( ":" ID ) | ( "{" ID "}" )
    Embed           -> embed ID ( "(" ID* ")" )? ("in" ID | "as" ID) // TODO: check if ID* needs to be switched to Token*
    Embedded        -> "embedded" Block
    InputPort       -> "inputPort" ID "{" PortLocation? PortProtocol? PortInterfaces? PortAggregates? PortRedirects? "}"
    OutputPort      -> "outputPort" ID "{" PortLocation? PortProtocol? PortInterfaces? "}"
      PortLocation    -> ( "location" | "Location" ) ":" line // Token*
      PortProtocol    -> ( "protocol" | "Protocol" ) ":" line ( Line )* // Token*
      PortInterfaces  -> ( "interfaces" | "Interfaces" ) ":" Line (, Line )* // Token*
      PortAggregates  -> ( "aggregates" | "Aggregates" ) ":" Line (, Line )* // Token*
      PortRedirects   -> ( "redirects" | "Redirects" ) ":" Line (, Line )* // Token*
    Init            -> "init" Block
    Main            -> "main" Block
    Courier         -> "courier" "<" ID ">" Block
    DefineProcedure -> "define" ID Block

// Main            -> "main" ( "{" ( "[" Procedure "]" )* | Procedure "}" ) | Block
// Procedure       -> ID "(" ID? ")" ( "(" ID? ")" )? Block

Block           -> "{" (_* '\n')* "}" ( keep track of "{" and "}" )
Line            -> _* ( '\n' | specifiedToken )

// Constants: https://docs.jolie-lang.org/v1.13.x-git/language-tools-and-standard-library/basics/constants/index.html
// Scope, Install: https://docs.jolie-lang.org/v1.13.x-git/language-tools-and-standard-library/basics/fault-handling/scopes-and-faults/index.html
//
